# This is a basic workflow to help you get started with Actions
#Run configured Tests from the Test Directory
name: Integration Test with PhantomJS

# Controls when the action will run. Triggers the workflow pull request
# events but only for the master branch
on:
  pull_request:
    # Pull Request events on master branch
    branches: 
      - master
  workflow_dispatch:
     branches:    
      - master  

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Configure and Run the Testing Job
  phantomjs-test:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
       # Install available Docker Libraries
      - name: Install available Docker Libraries
        run: |
          sudo apt-get update 
          sudo apt-cache search containerd | sort
          sudo apt-cache show containerd
          sudo apt-get install containerd docker.io docker-compose
          sudo usermod -aG docker runner

       # List all installed Docker Libraries
      - name: List all installed Docker Libraries
        run: |
          dpkg --get-selections | grep -i docker | sort
        
      # Start Docker Engine
      - name: Start Docker Engine
        run: |
          sudo systemctl start docker
          sudo systemctl status docker -l
        
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        
      # Build Container Images
      - name: Build Container Images with 'docker-compose'
        run: |
          cat docker-compose.yml.example | sed -re "s#/absolute/path/to/project#$(pwd)#" > docker-compose.yml
          cat docker-compose.yml
          docker-compose up -d --build
          docker-compose ps

      - name: Starting Test Sequences
        run: echo "Starting Test Sequences"

      - name: Listing Directory Contents
        run: |
          echo 'User:' $(whoami) 
          echo 'Working Directory:' $(pwd) 
          echo 'Directory Content:' $(ls -lah)
        
      # Test the Controller Functionality
      - name: Run the Controller Tests with 'Plack::Test'
        run: |
          export OPENSSL_CONF=/dev/null ; bin/phantomjs t/waitfor_product-list.js
          docker-compose logs api
          docker-compose logs web

      # Runs a set of commands using the runners shell
      #- name: Run a multi-line script
      #  run: |
      #    echo Add other actions to build,
      #    echo test, and deploy your project.
